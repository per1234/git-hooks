#!/bin/bash

# check code formatting compliance
# Artistic Style must be installed in the path

# comma separated list of folders to exclude from the formatting check
readonly excludedPathList="'./.git'"

# configure the location of the Artistic Style configuration file to use in the check
readonly astyleConfigurationPath=""

export PATH=/usr/local/bin:$PATH

readonly astylePath=$(command -v astyle)

if [[ ! -e "$astylePath" ]]; then
  echo 'ERROR: Artistic Style is not installed or not in PATH.'
  echo 'You can download Artistic Style from https://sourceforge.net/projects/astyle/files'
  echo 'Installation instructions: http://astyle.sourceforge.net/install.html'
  exit 1
fi

if [[ ! -e "$astyleConfigurationPath" ]]; then
  echo "ERROR: The Artistic Style configuration file was not found in the specified location (${astyleConfigurationPath})."
  exit 1
fi

# stash so that unstaged changes are not checked
git stash -q --keep-index

# assemble the find options for the excluded paths from the list
for excludedPath in ${excludedPathList//,/ }; do
  excludeOptions="$excludeOptions -path $excludedPath -prune -or"
done

# set default exit status
exitStatus=0

while read -r filename; do
  # check if it's a file (find matches on pruned folders)
  if [[ -f "$filename" ]]; then
    # check if the file is tracked by git
    if ! git ls-files --error-unmatch "$filename" &>/dev/null; then
      # don't check untracked files
      continue
    fi

    if ! diff --strip-trailing-cr "$filename" <(astyle --options="$astyleConfigurationPath" --dry-run <"$filename"); then
      echo "ERROR: Non-compliant code formatting in $filename"
      # make the hook fail
      exitStatus=1
    fi
  fi
done <<<"$(eval "find . -regextype posix-extended $excludeOptions \( -iregex '.*\.((ino)|(h)|(hpp)|(hh)|(hxx)|(h\+\+)|(cpp)|(cc)|(cxx)|(c\+\+)|(cp)|(c)|(ipp)|(ii)|(ixx)|(inl)|(tpp)|(txx)|(tpl))$' -and -type f \)")"

git stash pop -q

exit $exitStatus
